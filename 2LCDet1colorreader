/*********
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/tca9548a-i2c-multiplexer-esp32-esp8266-arduino/
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files.
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
*********/

/* I2C */
#include <Wire.h>
/* MULTIPLEXER */
#include <Adafruit_GFX.h>
/* LCD */
#include <LiquidCrystal_I2C.h>
/* GESTURE */
#include <SparkFun_APDS9960.h>

/*** DECLARATION MULTIPLEXER ***/
// Select I2C BUS
void TCA9548A(uint8_t bus){
  Wire.beginTransmission(0x70);  // TCA9548A address
  Wire.write(1 << bus);          // send byte to select bus
  Wire.endTransmission();
}

/*** DECLARATION LCD ***/
LiquidCrystal_I2C lcd0(0x27 , 16, 2); // set the LCD address to 0x27, if new version please use 0x3F instead.
LiquidCrystal_I2C lcd1(0x27 , 16, 2); // set the LCD address to 0x27, if new version please use 0x3F instead.

/*** DECLARATION GESTURE ***/
SparkFun_APDS9960 apds = SparkFun_APDS9960();
uint16_t ambient_light = 0;
uint16_t red_light = 0;
uint16_t green_light = 0;
uint16_t blue_light = 0;

void setup() {
  Serial.begin(115200);

   // Start I2C communication with the Multiplexer
  Wire.begin();

 /*** INIT LCD0 VIA MULTIPLEXER ***/
  TCA9548A(0); 
  lcd0.init();  //initialize the lcd
  lcd0.backlight();  //open the backlight
 
  /*** INIT LCD1 VIA MULTIPLEXER ***/
  TCA9548A(1); 
  lcd1.init();  //initialize the lcd
  lcd1.backlight();  //open the backlight
  
  /*** INIT GESTURE VIA MULTIPLEXER ***/

  TCA9548A(2); 
  Serial.println();
  Serial.println(F("--------------------------------"));
  Serial.println(F("APDS-9960 - ColorSensor"));
  Serial.println(F("--------------------------------"));
  
  // Initialize APDS-9960 (configure I2C and initial values)
  if ( apds.init() ) {
    Serial.println(F("APDS-9960 initialization complete"));
  } else {
    Serial.println(F("Something went wrong during APDS-9960 init!"));
  }
  
  // Start running the APDS-9960 light sensor (no interrupts)
  if ( apds.enableLightSensor(false) ) {
    Serial.println(F("Light sensor is now running"));
  } else {
    Serial.println(F("Something went wrong during light sensor init!"));
  }
  
  // Wait for initialization and calibration to finish
  delay(500);

}
 
void loop() {

 /*** AFFICHAGE LCD0 VIA MULTIPLEXER ***/
  // Write to OLED on bus number 0
  TCA9548A(0);
  lcd0.setCursor(3, 0); // set the cursor to column 3, line 0
  lcd0.print("Hello GeeekPi");  // Print a message to the LCD
  
  lcd0.setCursor(2, 1); // set the cursor to column 2, line 1
  lcd0.print("hello world");  // Print a message to the LCD.

  /*** AFFICHAGE LCD1 VIA MULTIPLEXER ***/
  TCA9548A(1);
  // Write to OLED on bus number 1
  lcd1.setCursor(3, 0); // set the cursor to column 3, line 0
  lcd1.print("Hello");  // Print a message to the LCD
  
  lcd1.setCursor(2, 1); // set the cursor to column 2, line 1
  lcd1.print("Little Rock");  // Print a message to the LCD.
  
  /*** LECTURE GESTURE VIA MULTIPLEXER ***/
  TCA9548A(2);
   // Read the light levels (ambient, red, green, blue)
  if (  !apds.readAmbientLight(ambient_light) ||
        !apds.readRedLight(red_light) ||
        !apds.readGreenLight(green_light) ||
        !apds.readBlueLight(blue_light) ) {
    Serial.println("Error reading light values");
  } else {
    Serial.print("Ambient: ");
    Serial.print(ambient_light);
    Serial.print(" Red: ");
    Serial.print(red_light);
    Serial.print(" Green: ");
    Serial.print(green_light);
    Serial.print(" Blue: ");
    Serial.println(blue_light);
  }
  
  // Wait 1 second before next reading
  delay(1000);
}


/** FONCTION GESTURE **/
